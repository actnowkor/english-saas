DB 설계

products·payments·payment_events·entitlements 테이블을 추가하고, 각 컬럼 스펙/인덱스/고유 제약 조건을 상세 정의한다.
• PK/ FK/ UNIQUE (provider_tx_id)·기본값 포함 → SQL DDL 초안 작성.
• entitlements.is_active는 start_at <= now() < end_at 조건 뷰 또는 계산식으로 제공, users.pro_until 캐시 컬럼(선택) 업데이트 트리거 설계.
RLS 정책 초안: 일반 사용자는 본인 레코드 SELECT, INSERT/UPDATE/DELETE는 서비스 롤만 허용.
can_start_session(user_id) 함수(또는 뷰) 설계: 하루 1회 무료 정책 + entitlements 활성 권리 체크 (Asia/Seoul 기준).
백엔드 구현 계획

공통 유틸
PayApp REST 호출 래퍼(lib/payments/payapp-client.ts 등) 작성: API Key/env 로드, 요청/응답 로깅.
상태 상수/타입 정의(payments/types.ts).
API 엔드포인트
POST /api/learn/check:
• Supabase RPC 대신 서버에서 can_start_session 호출 → can_start, reason, pro_until 반환.
POST /api/payments/start:
• Body: { product_id } 검증 → products 조회 → payments insert(pending) → PayApp payrequest 호출 → payurl, mul_no 반환.
• 실패 시 상태 failed, 에러 로그.
POST /api/payments/webhook:
• PayApp 서명/금액 검증 → payments 멱등 처리(provider_tx_id, 상태 검사).
• 결제 승인 시 트랜잭션으로 payments.status='paid', entitlements insert, payment_events 로깅 → 응답 텍스트 SUCCESS.
POST /api/payments/cancel(관리자):
• PayApp paycancel 호출 → 성공 시 payments.status, entitlements.end_at 업데이트.
(선택) GET /api/entitlements/me: 현재 권리/만료일 조회.
서비스 로직
세션 생성 루프 유지, 다만 /api/sessions 호출 전 프런트에서 /api/learn/check 반드시 거치도록 가이드.
complete_session 시점이 무료 카운팅 기준이므로 현 로직 변화 없음.
프런트엔드 구현 순서

대시보드 표시
useDashboard 결과에 free_sessions_left, pro_until 등을 포함하도록 API 확장.
헤더/대시보드에 “무료 1/1” 또는 “무제한 이용권 ~YYYY.MM.DD” 배지 노출.
학습 진입 흐름
StartLearningCard 클릭 → /api/learn/check 호출.
• can_start=true → 기존 /api/sessions 로직 진행.
• false → 결제 모달 표시.
결제 모달
상품 정보(정가/런칭가), 안내 문구 노출.
“결제하기” → /api/payments/start 호출 → 응답 payurl 새 창 오픈.
결제 후에는 웹훅 결과 기반으로 상태가 업데이트되므로, 폴링 또는 useDashboard 재호출.
결제 완료 UX
결제 성공 시 “이용권이 활성화되었습니다” 토스트/배지 갱신.
실패/취소 안내 로직 추가.
QA 체크리스트

무료 세션 남음 → 체크 통과, 세션 생성.
무료 소진 & 권리 없음 → 결제 모달로 분기.
결제 승인 후 : 웹훅 도착 → entitlements 생성 → /api/learn/check 즉시 can_start=true 확인.
웹훅 중복 호출 → 멱등 처리로 상태 변동 없음.
금액/링크키 불일치 → 거절 후 로그 기록.
취소 처리 → entitlements 즉시 비활성화.
이 계획을 기반으로 DB → 백엔드 → 프런트 순으로 구현을 진행하면, 기존 학습 루프를 건드리지 않고 결제/권리 기능을 추가할 수 있습니다.



주요 변경 사항(완료됨)

lib/supabase/service-client.ts: 서비스 롤 키를 사용하는 Supabase 클라이언트를 추가해 결제/권리 테이블에 서버 전용 권한으로 접근할 수 있게 했습니다.
lib/payments/payapp-client.ts: PayApp REST 호출·환경 변수 검증 유틸을 신설해 payrequest 및 웹훅 검증에 재사용합니다.
app/api/learn/check/route.ts: can_start_session RPC를 호출해 하루 무료·이용권 여부를 판단하는 엔드포인트를 추가했습니다.
app/api/payments/start/route.ts: 상품 검증 → 결제 레코드 생성 → PayApp payrequest 호출 후 payurl을 반환하는 API를 구현했습니다.
app/api/payments/webhook/route.ts: PayApp FeedbackURL 수신 시 멱등하게 결제 상태를 갱신하고 이용권을 발급하며, 이벤트 로그를 남깁니다.
components/history/replay-item.tsx: 한글 깨짐을 없애고 개념 표기 및 채점 메시지를 정리했습니다.
lib/logic/grade-utils.ts: 채점 함수를 분리해 복습 카드에서 재사용하도록 했습니다.
env.d.ts: 새로 사용하는 PayApp/Supabase 서비스 키 환경 변수를 타입으로 정의했습니다.
테스트

npm run test -- --reporter=basic --test-timeout=30000 (성공, 기존 Vitest 스위트 통과)
참고 및 다음 단계

환경 변수(SUPABASE_SERVICE_ROLE_KEY, PAYAPP_*)를 서버에 설정해야 합니다.
프런트엔드에서 학습 시작 버튼을 /api/learn/check → /api/payments/start 흐름으로 연동하고, 결제 성공 후 배지/상태 표시 UI를 추가하면 결제 기능이 완성됩니다.



진행중인 사항

프론트엔드 디자인을 구성한다. 홈화면에서 가격 부분 무료와 30일 이용권으로 간단히 구분한다. 백엔드에서 결제 취소까지 구현하자. 그리고 설정창에는 이용현황을 보여주는 카드를 배치한다. 무료고객 하루 1학습 무료, 유료고객 무제한 학습,으로 구분한다. 결제 후 3일이 지나지 않았다면 해지 할 수 있도록 하자. 3일이 지나는 경우에는 해지 버튼을 없앤다. 만료일을 표시한다. 무료는 일자표시하지 않고 무제한 학습 버튼을 결제버튼과 연결한다. 결제 완료하면 설정창으로 이동하도록 한다. 로그아웃하면 홈화면으로 가도록 수정한다. 미들웨어 파일도 한번 점검해서 개선하자. 오류발생하지 않고 기존 로직에서 문제발생하지 않도록 섬세하게 코드 업데이트를 시작하자.

현재까지 결제관련 진행된 사항을 점검하고 마무리되지 않은 사항 마무리 하자.